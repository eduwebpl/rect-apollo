input _idOperatorsFilterFindManyUserRelayInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindOneUserRelayInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveManyUserRelayInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveOneUserRelayInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateManyUserRelayInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateOneUserRelayInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUserRelayInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input AgeOperatorsFilterFindManyUserRelayInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterFindOneUserRelayInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterRemoveManyUserRelayInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterRemoveOneUserRelayInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUpdateManyUserRelayInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUpdateOneUserRelayInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUserRelayInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input CreateManyUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
}

type CreateManyUserRelayPayload {
  """Created document ID"""
  recordIds: [MongoID]!

  """Created documents"""
  records: [UserRelay]!

  """Count of all documents created"""
  createCount: Int!

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input CreateOneUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
}

type CreateOneUserRelayPayload {
  """Created document ID"""
  recordId: MongoID

  """Created document"""
  record: UserRelay

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

enum EnumUserRelayGender {
  male
  female
  ladyboy
}

enum EnumUserRelayLanguagesSkill {
  basic
  fluent
  native
}

input FilterFindManyUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterFindManyUserRelayInput
  OR: [FilterFindManyUserRelayInput!]
  AND: [FilterFindManyUserRelayInput!]
}

input FilterFindOneUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterFindOneUserRelayInput
  OR: [FilterFindOneUserRelayInput!]
  AND: [FilterFindOneUserRelayInput!]
}

input FilterRemoveManyUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterRemoveManyUserRelayInput
  OR: [FilterRemoveManyUserRelayInput!]
  AND: [FilterRemoveManyUserRelayInput!]
}

input FilterRemoveOneUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterRemoveOneUserRelayInput
  OR: [FilterRemoveOneUserRelayInput!]
  AND: [FilterRemoveOneUserRelayInput!]
}

input FilterUpdateManyUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterUpdateManyUserRelayInput
  OR: [FilterUpdateManyUserRelayInput!]
  AND: [FilterUpdateManyUserRelayInput!]
}

input FilterUpdateOneUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterUpdateOneUserRelayInput
  OR: [FilterUpdateOneUserRelayInput!]
  AND: [FilterUpdateOneUserRelayInput!]
}

input FilterUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterUserRelayInput
  OR: [FilterUserRelayInput!]
  AND: [FilterUserRelayInput!]
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection.
MongoDB by default use 12-byte ObjectId value
(https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  userCreate(input: RelayCreateOneUserRelayInput!): CreateOneUserRelayPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  userCreateMany(input: RelayCreateManyUserRelayInput!): CreateManyUserRelayPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  userUpdateById(input: RelayUpdateByIdUserRelayInput!): UpdateByIdUserRelayPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  userUpdateOne(input: RelayUpdateOneUserRelayInput!): UpdateOneUserRelayPayload

  """
  Update many documents without returning them: Use Query.update mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  userUpdateMany(input: RelayUpdateManyUserRelayInput!): UpdateManyUserRelayPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  userRemoveById(input: RelayRemoveByIdUserRelayInput!): RemoveByIdUserRelayPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  userRemoveOne(input: RelayRemoveOneUserRelayInput!): RemoveOneUserRelayPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose
  method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  userRemoveMany(input: RelayRemoveManyUserRelayInput!): RemoveManyUserRelayPayload
}

"""
An object, that can be fetched by the globally unique ID among all types.
"""
interface Node {
  """The globally unique ID among all types."""
  id: ID!
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterFindManyUserRelayInput {
  age: AgeOperatorsFilterFindManyUserRelayInput
  _id: _idOperatorsFilterFindManyUserRelayInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterFindOneUserRelayInput {
  age: AgeOperatorsFilterFindOneUserRelayInput
  _id: _idOperatorsFilterFindOneUserRelayInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterRemoveManyUserRelayInput {
  age: AgeOperatorsFilterRemoveManyUserRelayInput
  _id: _idOperatorsFilterRemoveManyUserRelayInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterRemoveOneUserRelayInput {
  age: AgeOperatorsFilterRemoveOneUserRelayInput
  _id: _idOperatorsFilterRemoveOneUserRelayInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterUpdateManyUserRelayInput {
  age: AgeOperatorsFilterUpdateManyUserRelayInput
  _id: _idOperatorsFilterUpdateManyUserRelayInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterUpdateOneUserRelayInput {
  age: AgeOperatorsFilterUpdateOneUserRelayInput
  _id: _idOperatorsFilterUpdateOneUserRelayInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterUserRelayInput {
  age: AgeOperatorsFilterUserRelayInput
  _id: _idOperatorsFilterUserRelayInput
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Query {
  """Fetches an object that has globally unique ID among all types"""
  node(
    """The globally unique ID among all types"""
    id: ID!
  ): Node
  userById(_id: MongoID!): UserRelay
  userByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsUserRelayInput): [UserRelay]
  userOne(
    """Filter by fields"""
    filter: FilterFindOneUserRelayInput
    skip: Int
    sort: SortFindOneUserRelayInput
  ): UserRelay
  userMany(
    """Filter by fields"""
    filter: FilterFindManyUserRelayInput
    skip: Int
    limit: Int = 1000
    sort: SortFindManyUserRelayInput
  ): [UserRelay]
  userTotal(
    """Filter by fields"""
    filter: FilterUserRelayInput
  ): Int
  userConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyUserRelayInput

    """Sort argument for data ordering"""
    sort: SortConnectionUserRelayEnum = _ID_DESC
  ): UserRelayConnection
  userPagination(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyUserRelayInput
    sort: SortFindManyUserRelayInput
  ): UserRelayPagination
}

input RelayCreateManyUserRelayInput {
  records: [CreateManyUserRelayInput!]!

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input RelayCreateOneUserRelayInput {
  record: CreateOneUserRelayInput!

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input RelayRemoveByIdUserRelayInput {
  _id: MongoID!

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input RelayRemoveManyUserRelayInput {
  """Filter by fields"""
  filter: FilterRemoveManyUserRelayInput!

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input RelayRemoveOneUserRelayInput {
  """Filter by fields"""
  filter: FilterRemoveOneUserRelayInput
  sort: SortRemoveOneUserRelayInput

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input RelayUpdateByIdUserRelayInput {
  record: UpdateByIdUserRelayInput!

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input RelayUpdateManyUserRelayInput {
  record: UpdateManyUserRelayInput!

  """Filter by fields"""
  filter: FilterUpdateManyUserRelayInput
  sort: SortUpdateManyUserRelayInput
  skip: Int
  limit: Int = 1000

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input RelayUpdateOneUserRelayInput {
  record: UpdateOneUserRelayInput!

  """Filter by fields"""
  filter: FilterUpdateOneUserRelayInput
  sort: SortUpdateOneUserRelayInput
  skip: Int

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

type RemoveByIdUserRelayPayload {
  """Removed document ID"""
  recordId: MongoID

  """Removed document"""
  record: UserRelay

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

type RemoveManyUserRelayPayload {
  """Affected documents number"""
  numAffected: Int

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

type RemoveOneUserRelayPayload {
  """Removed document ID"""
  recordId: MongoID

  """Removed document"""
  record: UserRelay

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

enum SortConnectionUserRelayEnum {
  _ID_DESC
  _ID_ASC
}

enum SortFindByIdsUserRelayInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortFindManyUserRelayInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortFindOneUserRelayInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortRemoveOneUserRelayInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortUpdateManyUserRelayInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortUpdateOneUserRelayInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

input UpdateByIdUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
  _id: MongoID!
}

type UpdateByIdUserRelayPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: UserRelay

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input UpdateManyUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
}

type UpdateManyUserRelayPayload {
  """Affected documents number"""
  numAffected: Int

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

input UpdateOneUserRelayInput {
  name: String
  age: Float
  languages: [UserRelayLanguagesInput]
  contacts: UserRelayContactsInput
  gender: EnumUserRelayGender
}

type UpdateOneUserRelayPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: UserRelay

  """The globally unique ID among all types"""
  nodeId: ID

  """
  The client mutation ID used by clients like Relay to track the mutation. If
  given, returned in the response payload of the mutation.
  """
  clientMutationId: String
}

type UserRelay implements Node {
  name: String
  age: Float
  languages: [UserRelayLanguages]
  contacts: UserRelayContacts
  gender: EnumUserRelayGender
  _id: MongoID!

  """The globally unique ID among all types"""
  id: ID!
  staticAnalysisDemoField: String
}

"""A connection to a list of items."""
type UserRelayConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserRelayEdge!]!
}

type UserRelayContacts {
  email: String
  phones: [String]
}

input UserRelayContactsInput {
  email: String
  phones: [String]
}

"""An edge in a connection."""
type UserRelayEdge {
  """The item at the end of the edge"""
  node: UserRelay!

  """A cursor for use in pagination"""
  cursor: String!
}

type UserRelayLanguages {
  language: String
  skill: EnumUserRelayLanguagesSkill
}

input UserRelayLanguagesInput {
  language: String
  skill: EnumUserRelayLanguagesSkill
}

"""List of items with pagination."""
type UserRelayPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [UserRelay]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}
